name: Pinboard Backend develop Github Actions

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pinboard

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Create application.yml
        run: |
          mkdir -p src/main/resources 
          cat <<EOF > src/main/resources/application.yml
          spring:
            application:
              name: PINBOARD
            mvc:
              view:
                prefix: /WEB-INF/views/
                suffix: .jsp
            datasource:
              url: ${DB_URL}
              username: ${DB_USERNAME}
              password: ${DB_PASSWORD}
            jpa:
              hibernate:
                ddl-auto: update
              show-sql: true
            data:
              redis:
              host: redis
              port: 6379
              timeout: 60000

          spring.datasource.hikari.connection-init-sql: SET NAMES utf8mb4

          cors:
            allow:
              origins: ${CROSS_ORIGINS}

          server:
            port: 8484

          springdoc:
            swagger-ui:
              path: /pinboard-api
              enabled: true
              groups-order: DESC
              operations-sorter: method
              disable-swagger-default-url: true
              with-credentials: true
              displayRequestDuration: true
            api-docs:
              path: /v3/api-docs
              enabled: true
            packages-to-scan: com.example.pinboard

          jwt:
            secret: ${JWT_SECRET}
            token:
              access:
                expiration: 1800000
                prefix: Bearer
                header: Authorization
              refresh:
                expiration: 1209600000

          encryption:
            secret-key: ${ENCRYPTION_SECRET_KEY}
            init-vector: ${ENCRYPTION_INIT_VECTOR}
          EOF
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_SECRET_KEY: ${{ secrets.ENCRYPTION_SECRET_KEY }}
          ENCRYPTION_INIT_VECTOR: ${{ secrets.ENCRYPTION_INIT_VECTOR }}
          CROSS_ORIGINS: ${{ secrets.CROSS_ORIGINS }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          outputs: type=registry

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "${{ secrets.PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            if docker ps -a --format '{{.Names}}' | grep -q '^pinboard-app$'; then
              docker stop pinboard-app
              docker rm pinboard-app
            fi
            docker run -d --name pinboard-app -p 8484:8484 \
              -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e ENCRYPTION_SECRET_KEY=${{ secrets.ENCRYPTION_SECRET_KEY }} \
              -e ENCRYPTION_INIT_VECTOR=${{ secrets.ENCRYPTION_INIT_VECTOR }} \
              -e CROSS_ORIGINS="${{ secrets.CROSS_ORIGINS }}" \
              ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest